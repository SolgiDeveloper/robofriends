{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","Response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAgBeA,EAdF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAG3B,OAEE,yBAAKC,UAAU,mDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACE,4BAAKF,GACL,2BAAIC,MCYGK,EArBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAIlB,OACE,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCDhBW,EAXG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC/B,OACE,yBAAKX,UAAU,OACd,2BAAOA,UAAU,mCAChBY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCDI,G,MAPA,SAACC,GACd,OACE,yBAAKC,MAAS,CAACC,UAAW,SAAUC,OAAO,kCAAmCC,OAAQ,WACnFJ,EAAMK,YC0CEC,E,kDAxCb,aAAc,IAAD,8BACX,gBAcFC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAdxC,EAAKC,MAAM,CACTxB,OAAQ,GACRM,YAAa,IAJJ,E,gEAOQ,IAAD,OAGlBmB,MAAM,6CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAAErB,OAAO6B,S,+BAM/B,IAAD,EAC0BC,KAAKN,MAA7BxB,EADF,EACEA,OAAQM,EADV,EACUA,YACVyB,EAAiB/B,EAAOgC,QAAO,SAAAC,GACnC,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS7B,EAAY4B,kBAIvD,OAAQlC,EAAOoC,OAGb,yBAAKxC,UAAU,MACb,wBAAIA,UAAU,MAAd,eACE,kBAAC,EAAD,CAAWW,aAAcuB,KAAKX,iBAC9B,kBAAC,EAAD,KAEI,kBAAC,EAAD,CAAUnB,OAAS+B,MAP5B,wBAAInC,UAAU,SAAd,e,GA3BayC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.bf2bb259.chunk.js","sourcesContent":["import React from 'react'; \r\n\r\nconst Card = ({ name, email, id }) => {\r\n  // its return on thing.\r\n  // const { name, email, id } = props;\r\n  return(\r\n//<h1>RoboFriends</h1>\r\n    <div className='tc bg-light-green dib br3 ma2 grow bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList = ({ robots }) => {\r\n  // if (true) {\r\n  //   throw new Error('NOOOOOOOOOOOOO!');\r\n  // }\r\n  return(\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card \r\n              key={i} \r\n              id={robots[i].id} \r\n              name={robots[i].name} \r\n              email={robots[i].email}\r\n            />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n  return (\r\n    <div className='pa2'>\r\n     <input className='pa3 ba b--green bg-lightest-blue'\r\n      type='search'\r\n      placeholder='search robots'\r\n      onChange={searchChange}\r\n    />\r\n    </div>\r\n  );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style = {{overflowY: 'scroll', border:'1px solid rgb(0, 128, 128) 100%', height: '1000px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport {robots} from '../robots';\r\nimport SearchBox from '../components/SearchBox'; \r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\n//import ErrorBoundery from '../components/ErrorBoundery'; \r\nclass App extends Component {\r\n  constructor(){\r\n    super()\r\n    this.state={\r\n      robots: [],\r\n      searchfield: ''\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    // what if fetch is really slow or took 5 seconds and we had\r\n    // a hole ton of users =>> well in that case we can use if statment\r\n    fetch('http://jsonplaceholder.typicode.com/users')\r\n    .then(Response => Response.json())\r\n    .then(users => this.setState({ robots:users}))\r\n    /* this.setState({ robots: robots});*/\r\n  }\r\n  onSearchChange = (event) => {\r\n   this.setState({searchfield: event.target.value})\r\n  }\r\n  render(){\r\n    const { robots, searchfield } = this.state;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n    }) \r\n    // like this >>  \r\n    // robots.length === 0\r\n    return !robots.length ?\r\n     <h1 className='f1 tc'>Loading</h1> :\r\n    (\r\n      <div className='tc'>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n          <SearchBox searchChange={this.onSearchChange}/>\r\n          <Scroll>\r\n            \r\n              <CardList robots ={filteredRobots}/>\r\n            \r\n          </Scroll>\r\n      </div> \r\n    );      \r\n  } \r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}